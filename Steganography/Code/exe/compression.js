import"./pako.js";export class URICompressor{constructor(){}static compress(r){if(!URICompressor.isBinaryString(r)){console.warn("could not compress string, not binary");return}r=URICompressor.BinaryToU8(r);var t=pako.deflate(r,{level:9});return URICompressor.U8toBinary(t)}static decompress(r){if(!URICompressor.isBinaryString(r)){console.warn("could not decompress string, not binary");return}var t=URICompressor.BinaryToU8(r),s=pako.inflate(t,{level:9});return URICompressor.U8toBinary(s)}static U8toBinary(r){var t="";for(var s of r){var o=s.toString(2);t+=o=o.padStart(8,"0")}return t}static BinaryToU8(r){var t=URICompressor.splitIntoChunks(r,8),s=[];for(var o of t)s.push(Number.parseInt(o,2));return new Uint8Array(s)}static splitIntoChunks(r,t){for(var s=[],o=0;o<r.length;o+=t)s.push(r.slice(o,o+t));return s}static isBinaryString(r){var t,s,o,n=0==r.length%8,e=(t=r,s=t.match(/[^01]/g),null==s&&(s=""),o=0==t.length%8,0==s.length&&o);return"string"==typeof r&&n&&e}}